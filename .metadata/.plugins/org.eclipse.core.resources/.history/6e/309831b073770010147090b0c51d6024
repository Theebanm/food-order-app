package orderapp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import orderapp.dto.BillResponse;
import orderapp.dto.OrderRequest;
import orderapp.dto.PaymentDto;
import orderapp.dto.ResponseStructure;
import orderapp.entity.Order;
import orderapp.enums.OrderStatus;
import orderapp.service.OrderService;

@RestController
@RequestMapping("/api/order")
public class OrderController {
	
	@Autowired
	private OrderService orderService;
	
	@PostMapping("/bill")
	public ResponseEntity<ResponseStructure<BillResponse>> generateBill(@RequestBody OrderRequest orderRequest){
		BillResponse response = orderService.generateBill(orderRequest);
		ResponseStructure<BillResponse> apiResponse = new ResponseStructure<BillResponse>();
		apiResponse.setData(response);
		apiResponse.setMessage("bill generated");
		apiResponse.setStatusCode(HttpStatus.CREATED.value());
		
		return new ResponseEntity<>(apiResponse,HttpStatus.CREATED);
	}
	
	@PostMapping("/pay-and-place-order")
	public ResponseEntity<ResponseStructure<String>> payAndPlaceOrder(@RequestBody PaymentDto payment){
		String data = orderService.payAndPlaceOrder(payment);
		ResponseStructure<String> apiResponse = new ResponseStructure<>();
		apiResponse.setData(data);
		apiResponse.setMessage("Order placed");
		apiResponse.setStatusCode(HttpStatus.CREATED.value());
		
		return new ResponseEntity<>(apiResponse,HttpStatus.CREATED);
	}
	
	@GetMapping("/restaurant/{id}")
	public ResponseEntity<ResponseStructure<List<Order>>> fetchAllOrderByRestaurantId(@PathVariable Integer id){
		List<Order> orders = orderService.fetchAllOrderByRestaurantId(id);
		
		ResponseStructure<List<Order>> apiResponse = new ResponseStructure<>();
		apiResponse.setData(orders);
		apiResponse.setMessage("Order found");
		apiResponse.setStatusCode(HttpStatus.OK.value());
		
		return new ResponseEntity<>(apiResponse,HttpStatus.OK);
	}
	
	@PutMapping("/update-order/{id}")
	public ResponseEntity<ResponseStructure<String>> updateOrderStatus(@PathVariable Integer id,@RequestBody OrderStatus status){
	 orderService.updateOrderStatus(id,status);
	 ResponseStructure<String> apiResponse = new ResponseStructure<>();
		apiResponse.setData("Amount will be reverted soon");
		apiResponse.setMessage("Status updated Successfully");
		apiResponse.setStatusCode(HttpStatus.OK.value());
			
	 return new ResponseEntity<>(apiResponse,HttpStatus.OK);
	}
	
	
	@DeleteMapping("/{id}")
	public ResponseEntity<ResponseStructure<String>> deleteOrderById(@PathVariable Integer id){
		orderService.deleteOrderById(id);
		ResponseStructure<String> apiResponse = new ResponseStructure<>();
		apiResponse.setData("Order is Deleted Successfully");
		apiResponse.setMessage("Order is Deleted Successfully");
		apiResponse.setStatusCode(HttpStatus.OK.value());
			
	 return new ResponseEntity<>(apiResponse,HttpStatus.OK);
	}
}
